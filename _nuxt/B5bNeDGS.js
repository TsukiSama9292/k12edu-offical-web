import{j as i,K as C,aK as x,m as c,aL as f,aM as S,aN as k,aO as y,z as d,D as a,k as h,aP as l,l as v}from"./C1YSYaSJ.js";const H=i({class:[String,Array,Object],style:{type:[String,Array,Object],default:null}},"component");function P(e){const t=C("useRender");t.render=e}const W=i({tag:{type:[String,Object,Function],default:"div"}},"tag");function b(e){return x(()=>{const t=c(e),o=[],n={};if(t.background)if(f(t.background)){if(n.backgroundColor=t.background,!t.text&&S(t.background)){const s=k(t.background);if(s.a==null||s.a===1){const r=y(s);n.color=r,n.caretColor=r}}}else o.push(`bg-${t.background}`);return t.text&&(f(t.text)?(n.color=t.text,n.caretColor=t.text):o.push(`text-${t.text}`)),{colorClasses:o,colorStyles:n}})}function $(e){const{colorClasses:t,colorStyles:o}=b(()=>({text:c(e)}));return{textColorClasses:t,textColorStyles:o}}function p(e){const{colorClasses:t,colorStyles:o}=b(()=>({background:c(e)}));return{backgroundColorClasses:t,backgroundColorStyles:o}}const B=i({height:[Number,String],maxHeight:[Number,String],maxWidth:[Number,String],minHeight:[Number,String],minWidth:[Number,String],width:[Number,String]},"dimension");function R(e){return{dimensionStyles:d(()=>{const o={},n=a(e.height),s=a(e.maxHeight),r=a(e.maxWidth),u=a(e.minHeight),g=a(e.minWidth),m=a(e.width);return n!=null&&(o.height=n),s!=null&&(o.maxHeight=s),r!=null&&(o.maxWidth=r),u!=null&&(o.minHeight=u),g!=null&&(o.minWidth=g),m!=null&&(o.width=m),o})}}const j=i({rounded:{type:[Boolean,Number,String],default:void 0},tile:Boolean},"rounded");function w(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:h();return{roundedClasses:d(()=>{const n=l(e)?e.value:e.rounded,s=l(e)?e.value:e.tile,r=[];if(n===!0||n==="")r.push(`${t}--rounded`);else if(typeof n=="string"||n===0)for(const u of String(n).split(" "))r.push(`rounded-${u}`);else(s||n===!1)&&r.push("rounded-0");return r})}}const O=i({border:[Boolean,Number,String]},"border");function D(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:h();return{borderClasses:d(()=>{const n=e.border;return n===!0||n===""?`${t}--border`:typeof n=="string"||n===0?String(n).split(" ").map(s=>`border-${s}`):[]})}}const F=i({elevation:{type:[Number,String],validator(e){const t=parseInt(e);return!isNaN(t)&&t>=0&&t<=24}}},"elevation");function I(e){return{elevationClasses:v(()=>{const o=l(e)?e.value:e.elevation;return o==null?[]:[`elevation-${o}`]})}}export{W as a,b,D as c,w as d,j as e,O as f,$ as g,p as h,R as i,I as j,F as k,B as l,H as m,P as u};
